"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CCValidator = /** @class */ (function () {
    function CCValidator() {
    }
    CCValidator.prototype.getDigit = function (number) {
        if (number < 9)
            return number;
        return Math.floor(number / 10) + (number % 10);
    };
    CCValidator.prototype.getSize = function (d) {
        var num = d.toString();
        return num.length;
    };
    CCValidator.prototype.getPrefix = function (number, k) {
        if (this.getSize(number) > k) {
            var num = number.toString();
            return parseInt(num.substring(0, k));
        }
        return number;
    };
    CCValidator.prototype.prefixMatched = function (number, d) {
        return this.getPrefix(number, this.getSize(d)) == d;
    };
    CCValidator.prototype.sumOfDoubleEvenPlace = function (number) {
        var sum = 0;
        var num = number.toString();
        for (var i = this.getSize(number) - 2; i >= 0; i -= 2) {
            sum += this.getDigit((num.charCodeAt(i) - '0'.charCodeAt(0)) * 2);
        }
        return sum;
    };
    CCValidator.prototype.sumOfOddPlace = function (number) {
        var sum = 0;
        var num = number.toString();
        for (var i = this.getSize(number) - 1; i >= 0; i -= 2) {
            sum += num.charCodeAt(i) - '0'.charCodeAt(0);
        }
        return sum;
    };
    CCValidator.prototype.isValid = function (number) {
        return (this.getSize(number) >= 13 &&
            this.getSize(number) <= 16 &&
            (this.prefixMatched(number, 4) ||
                this.prefixMatched(number, 5) ||
                this.prefixMatched(number, 37) ||
                this.prefixMatched(number, 6)) &&
            (this.sumOfDoubleEvenPlace(number) + this.sumOfOddPlace(number)) % 10 === 0);
    };
    return CCValidator;
}());
exports.default = CCValidator;

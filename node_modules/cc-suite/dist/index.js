"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var cc_validator_1 = __importDefault(require("./cc_validator"));
var cc_generator_1 = __importDefault(require("./cc_generator"));
var cc_type_1 = __importDefault(require("./cc_type"));
var bin_lookup_1 = __importDefault(require("./bin_lookup"));
var CCSuite = /** @class */ (function () {
    function CCSuite() {
        this._validator = new cc_validator_1.default();
        this._generator = new cc_generator_1.default();
        this._bin = new bin_lookup_1.default();
    }
    CCSuite.getInstance = function () {
        if (!CCSuite.instance) {
            CCSuite.instance = new CCSuite();
        }
        return CCSuite.instance;
    };
    CCSuite.prototype.validateCard = function (cardNumber) {
        var digits = cardNumber.replace(/\D/g, '');
        return this._validator.isValid(digits);
    };
    CCSuite.prototype.generateRandomCard = function (bin, length) {
        if (bin === void 0) { bin = '42'; }
        if (length === void 0) { length = 16; }
        bin = bin === '' ? '42' : bin;
        return this._generator.generateValidCard(bin, length);
    };
    CCSuite.prototype.getCardType = function (cardNumber) {
        if (this.validateCard(cardNumber)) {
            return (0, cc_type_1.default)(cardNumber);
        }
        return 'Invalid card number!';
    };
    CCSuite.prototype.setBinConfig = function (config) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this._bin.setConfig(config);
                return [2 /*return*/];
            });
        });
    };
    CCSuite.prototype.getBinInfo = function (bin) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(bin.length >= 4 && bin.length < 9)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this._bin.lookup(bin)];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2: return [2 /*return*/, 'Invalid bin!'];
                }
            });
        });
    };
    return CCSuite;
}());
exports.default = CCSuite.getInstance();

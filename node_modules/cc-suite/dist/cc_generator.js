"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CCGenerator = /** @class */ (function () {
    function CCGenerator() {
        this.luhnChk = (function (arr) {
            return function (ccNum) {
                var len = ccNum.length;
                var bit = 1;
                var sum = 0;
                var val;
                while (len) {
                    val = parseInt(ccNum.charAt(--len), 10);
                    sum += (bit ^= 1) ? arr[val] : val;
                }
                return sum && sum % 10 === 0;
            };
        })([0, 2, 4, 6, 8, 1, 3, 5, 7, 9]);
    }
    CCGenerator.prototype.generateValidCard = function (bin, length) {
        if (bin === void 0) { bin = '42'; }
        var cardNumber = this.generate(bin, length);
        var luhnValid = this.luhnChk(cardNumber);
        var limit = 20;
        var counter = 0;
        while (!luhnValid) {
            cardNumber = this.generate(bin, length);
            luhnValid = this.luhnChk(cardNumber);
            counter++;
            if (counter === limit) {
                cardNumber = luhnValid ? cardNumber : 'cannot make valid card with given params';
                break;
            }
        }
        return cardNumber;
    };
    CCGenerator.prototype.generate = function (bin, length) {
        var cardNumber = bin;
        var randomNumberLength = length - (bin.length + 1);
        for (var i = 0; i < randomNumberLength; i++) {
            var digit = Math.floor(Math.random() * 9) + 0;
            cardNumber += digit;
        }
        var checkDigit = this.getCheckDigit(cardNumber);
        cardNumber += String(checkDigit);
        return cardNumber;
    };
    CCGenerator.prototype.getCheckDigit = function (number) {
        var sum = 0;
        var module;
        var checkDigit;
        for (var i = 0; i < number.length; i++) {
            var digit = parseInt(number.substring(i, i + 1));
            if (i % 2 === 0) {
                digit = digit * 2;
                if (digit > 9) {
                    digit = Math.floor(digit / 10) + (digit % 10);
                }
            }
            sum += digit;
        }
        module = parseInt(String(sum)) % 10;
        checkDigit = module === 0 ? 0 : 10 - module;
        return checkDigit;
    };
    return CCGenerator;
}());
exports.default = CCGenerator;

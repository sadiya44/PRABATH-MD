"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.download = exports.search = void 0;
const Utils_1 = require("../Utils");
const Constant_1 = require("../Constant");
async function search(query) {
    try {
        const { data } = await Utils_1.Axios.request({
            baseURL: Constant_1.YoutubeSearchBaseUrl,
            url: "/results",
            params: {
                search_query: query,
            },
        }).catch((e) => e?.response);
        const $ = (0, Utils_1.Cheerio)(data);
        let _string = "";
        $("script").each((i, e) => {
            if (/var ytInitialData = /gi.exec($(e).html())) {
                _string += $(e)
                    .html()
                    .replace(/var ytInitialData = /i, "")
                    .replace(/;$/, "");
            }
        });
        const _initData = JSON.parse(_string).contents.twoColumnSearchResultsRenderer.primaryContents;
        const Results = [];
        let _render = null;
        if (_initData.sectionListRenderer) {
            _render = _initData.sectionListRenderer.contents
                .filter((item) => item?.itemSectionRenderer?.contents.filter((v) => v.videoRenderer || v.playlistRenderer || v.channelRenderer))
                .shift().itemSectionRenderer.contents;
        }
        if (_initData.richGridRenderer) {
            _render = _initData.richGridRenderer.contents
                .filter((item) => item.richGridRenderer && item.richGridRenderer.contents)
                .map((item) => item.richGridRenderer.contents);
        }
        for (const item of _render) {
            if (item.videoRenderer && item.videoRenderer.lengthText) {
                const video = item.videoRenderer;
                const title = video?.title?.runs[0]?.text || "";
                const duration = video?.lengthText?.simpleText || "";
                const thumbnail = video?.thumbnail?.thumbnails[video?.thumbnail?.thumbnails.length - 1].url || "";
                const uploaded = video?.publishedTimeText?.simpleText || "";
                const views = video?.viewCountText?.simpleText?.replace(/[^0-9.]/g, "") || "";
                if (title && thumbnail && duration && uploaded && views) {
                    Results.push({
                        title,
                        thumbnail,
                        duration,
                        uploaded,
                        views,
                        url: "https://www.youtube.com/watch?v=" + video.videoId,
                    });
                }
            }
        }
        return Results;
    }
    catch (e) {
        return {
            error: true,
            message: String(e),
        };
    }
}
exports.search = search;
async function download(url) {
    try {
        const { data } = await Utils_1.Axios.request({
            baseURL: Constant_1.YoutubeDownloadBaseUrl,
            url: "/ytdl/v2/youtube/video_info",
            method: "POST",
            data: {
                url,
            },
        }).catch((e) => e?.response);
        if (data.cscode !== 200) {
            throw new Error("API response code " + data.cscode || "unknown");
        }
        const { result } = data.data;
        const urls = [];
        for (const obj of result.videos) {
            urls.push({
                url: obj.url,
                quality: obj.quality,
                ext: obj.type,
            });
        }
        return {
            title: result.meta.title,
            duration: result.meta.length_seconds,
            thumbnail: result.meta.thumbnail.url,
            urls,
            mp3: isNaN(result.convert_to_mp3) ? result.convert_to_mp3 : "",
        };
    }
    catch (e) {
        return {
            error: true,
            message: String(e),
        };
    }
}
exports.download = download;
